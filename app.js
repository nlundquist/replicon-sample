// Generated by CoffeeScript 1.9.3
(function() {
  var App, Employee, EmployeeList, RESTResource, RESTResourceList, RuleDefinitionList, ShiftRuleList, Solution, TimeoffReqList, Week, asyncComputed, creator, extend, getAsUriParameters, set_equals, view_model, xhr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  creator = {
    name: 'Nils Lundquist',
    email: 'nlundqu@gmail.com'
  };

  getAsUriParameters = function(data) {
    return Object.keys(data).map(function(k) {
      var keyE;
      if (Array.isArray(data[k])) {
        keyE = encodeURIComponent(k + '[]');
        return data[k].map(function(subData) {
          return keyE + '=' + encodeURIComponent(subData);
        }).join('&');
      } else {
        return encodeURIComponent(k) + '=' + encodeURIComponent(data[k]);
      }
    }).join('&');
  };

  extend = function(target, source) {
    Object.keys(source).map(function(prop) {
      return target[prop] = source[prop];
    });
    return target;
  };

  asyncComputed = function(promise_gen) {
    var async, current_promise, observable;
    observable = ko.observable(null);
    current_promise = null;
    async = ko.computed(function() {
      if (current_promise) {
        current_promise.reject();
      }
      return current_promise = promise_gen().then(function(value) {
        return observable(value);
      })["catch"](function(e) {
        throw e;
      });
    }, this, {
      deferEvaluation: true
    });
    return ko.computed(function() {
      async();
      return observable();
    }, this, {
      deferEvaluation: true
    });
  };

  xhr = function(options) {
    return new Promise(function(resolve, reject) {
      var req;
      req = new XMLHttpRequest();
      req.open(options.method || 'GET', options.url, true);
      if (options.content_type) {
        req.setRequestHeader('Content-Type', options.content_type);
      }
      req.onreadystatechange = function(e) {
        if (req.readyState !== 4) {
          return;
        }
        if ([200, 304].indexOf(req.status) === -1) {
          return reject(new Error('Server responded with a status of ' + req.status));
        } else {
          return resolve(JSON.parse(e.target.response));
        }
      };
      return req.send(options.data || '');
    });
  };

  Array.prototype.shuffle = function() {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = this.length;
    while (currentIndex !== 0) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex--;
      temporaryValue = this[currentIndex];
      this[currentIndex] = this[randomIndex];
      this[randomIndex] = temporaryValue;
    }
    return this;
  };

  view_model = function(model, view_model) {
    return new Promise(function(resolve, reject) {
      var wrap;
      wrap = function(instance) {
        var vm;
        vm = new view_model();
        vm.model = instance;
        return vm;
      };
      return model.then(function(value) {
        if (value instanceof Array) {
          return resolve(value.map(function(m) {
            return wrap(m);
          }));
        } else {
          return resolve(wrap(m));
        }
      })["catch"](function(e) {
        return reject(e);
      });
    });
  };

  set_equals = function(a, b) {
    var a_diff, b_diff, set_a, set_b;
    set_a = new Set(a);
    set_b = new Set(b);
    a_diff = new Set(a.filter(function(x) {
      return !set_b.has(x);
    }));
    b_diff = new Set(b.filter(function(x) {
      return !set_a.has(x);
    }));
    return a_diff.size === 0 && b_diff.size === 0;
  };

  RESTResource = (function() {
    RESTResource.prototype.host = 'http://interviewtest.replicon.com';

    RESTResource.prototype.path = null;

    RESTResource.prototype.fetch = function(options) {
      return new Promise(function(resolve, reject) {
        return xhr(extend({
          url: this.host + this.path
        }, options)).then((function(_this) {
          return function(json) {
            extend(_this, json);
            return resolve(_this);
          };
        })(this))["catch"](function(e) {
          return reject(e);
        });
      });
    };

    RESTResource.prototype.save = function(options) {
      return new Promise(function(resolve, reject) {
        return xhr(extend({
          url: this.host + this.path,
          method: 'POST'
        }, options)).then((function(_this) {
          return function(json) {
            extend(_this, json);
            return resolve(_this);
          };
        })(this))["catch"](function(e) {
          return reject(e);
        });
      });
    };

    function RESTResource(instance) {
      if (instance == null) {
        instance = {};
      }
      this.save = bind(this.save, this);
      this.fetch = bind(this.fetch, this);
      extend(this, instance);
    }

    return RESTResource;

  })();

  RESTResourceList = (function(superClass) {
    extend1(RESTResourceList, superClass);

    function RESTResourceList() {
      this.fetch = bind(this.fetch, this);
      return RESTResourceList.__super__.constructor.apply(this, arguments);
    }

    RESTResourceList.prototype.models = null;

    RESTResourceList.prototype.fetch = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return xhr({
            url: _this.host + _this.path
          }).then(function(json) {
            _this.models = json.map(function(raw) {
              if (_this.type) {
                return new _this.type(raw);
              } else {
                return raw;
              }
            });
            return resolve(_this.models);
          })["catch"](function(e) {
            return reject(e);
          });
        };
      })(this));
    };

    return RESTResourceList;

  })(RESTResource);

  EmployeeList = (function(superClass) {
    extend1(EmployeeList, superClass);

    function EmployeeList() {
      return EmployeeList.__super__.constructor.apply(this, arguments);
    }

    EmployeeList.prototype.path = '/employees/';

    return EmployeeList;

  })(RESTResourceList);

  TimeoffReqList = (function(superClass) {
    extend1(TimeoffReqList, superClass);

    function TimeoffReqList() {
      return TimeoffReqList.__super__.constructor.apply(this, arguments);
    }

    TimeoffReqList.prototype.path = '/time-off/requests';

    return TimeoffReqList;

  })(RESTResourceList);

  RuleDefinitionList = (function(superClass) {
    extend1(RuleDefinitionList, superClass);

    function RuleDefinitionList() {
      return RuleDefinitionList.__super__.constructor.apply(this, arguments);
    }

    RuleDefinitionList.prototype.path = '/rule-definitions/';

    return RuleDefinitionList;

  })(RESTResourceList);

  ShiftRuleList = (function(superClass) {
    extend1(ShiftRuleList, superClass);

    function ShiftRuleList() {
      return ShiftRuleList.__super__.constructor.apply(this, arguments);
    }

    ShiftRuleList.prototype.path = '/shift-rules/';

    return ShiftRuleList;

  })(RESTResourceList);

  Employee = (function() {
    Employee.prototype.select = function() {
      if (app.active_employee() === this) {
        return app.active_employee(null);
      } else {
        return app.active_employee(this);
      }
    };

    Employee.prototype.off = function(date) {
      var day_index;
      day_index = date.diff(date.clone().startOf('isoweek'), 'days') + 1;
      return this.timeoff_reqs().some(function(req) {
        return req.week === date.isoWeek() && req.days.some(function(day) {
          return day === day_index;
        });
      });
    };

    Employee.prototype.works = function(date) {
      return this.shifts().some(function(shift) {
        return date.diff(shift) === 0;
      });
    };

    function Employee() {
      this.works = bind(this.works, this);
      this.off = bind(this.off, this);
      this.select = bind(this.select, this);
      this.shifts = ko.computed((function(_this) {
        return function() {
          if (app.solution()) {
            return app.solution().data.map(function(arg) {
              var _, employees;
              _ = arg[0], employees = arg[1];
              return employees;
            }).reduce((function(c, v) {
              return c.concat(v);
            }), []).filter(function(arg) {
              var _, employee;
              employee = arg[0], _ = arg[1];
              return employee === _this;
            }).reduce((function(c, arg) {
              var _, shifts;
              _ = arg[0], shifts = arg[1];
              return c.concat(shifts);
            }), []).map(function(moment) {
              return moment.toDate();
            });
          }
        };
      })(this));
      this.timeoff_reqs = ko.computed((function(_this) {
        return function() {
          if (app.timeoff_reqs()) {
            return app.timeoff_reqs().filter(function(tor) {
              return tor.employee_id === _this.model.id;
            });
          } else {
            return [];
          }
        };
      })(this));
    }

    return Employee;

  })();

  Week = (function() {
    function Week(start) {
      var day;
      this.start = start;
      this.days = (function() {
        var j, results;
        results = [];
        for (day = j = 0; j <= 6; day = ++j) {
          results.push(this.start.clone().add(day, 'days'));
        }
        return results;
      }).call(this);
    }

    return Week;

  })();

  Solution = (function() {
    Solution.create = function(weeks, employees) {
      var per_shift, per_shift_id;
      if (weeks === null || employees === null) {
        return null;
      }
      if (app.rule_defs() && app.shift_rules()) {
        per_shift_id = app.rule_defs().find(function(def) {
          return def.value === 'EMPLOYEES_PER_SHIFT';
        }).id;
        per_shift = app.shift_rules().find(function(rule) {
          return rule.rule_id === per_shift_id;
        }).value;
      }
      return new Solution(weeks, employees, per_shift || 0);
    };

    Solution.prototype.toJSON = function() {
      return this.data.map(function(arg) {
        var schedules, week;
        week = arg[0], schedules = arg[1];
        return {
          week: week.start.week(),
          schedules: schedules.map(function(arg1) {
            var employee, shifts;
            employee = arg1[0], shifts = arg1[1];
            return {
              employee_id: employee.model.id,
              schedule: shifts.map(function(date) {
                return date.diff(week.start, 'days') + 1;
              })
            };
          })
        };
      });
    };

    Solution.prototype.submit = function() {
      var params;
      params = {
        name: creator.name,
        email: creator.email
      };
      return xhr({
        url: RESTResource.prototype.host + "/submit?" + (getAsUriParameters(params)),
        method: 'POST',
        content_type: 'application/json',
        data: JSON.stringify(this)
      }).then(function(xhr) {
        return alert('yay');
      }, function(e) {
        throw e;
      });
    };

    Solution.prototype.solve = function() {
      var applyTimeoffRequests, assign, day, groupPossibleEmployees, groupShifts, possible_assignments, possible_employees, unwrapAssignments, week;
      applyTimeoffRequests = function(employees, week, day) {
        var possible;
        day = day.diff(week.start, 'days') + 1;
        week = week.start.isoWeek();
        possible = employees.filter(function(e) {
          return !e.timeoff_reqs().some(function(tor) {
            return tor.week === week && tor.days.some(function(d) {
              return d === day;
            });
          });
        });
        if (possible.length > 0) {
          return possible;
        } else {
          return employees;
        }
      };
      groupPossibleEmployees = function(carry, value) {
        var _, day, possible_employees, set, shifts;
        possible_employees = value[0], day = value[1];
        if ((set = carry.find(function(arg) {
          var _, pe;
          pe = arg[0], _ = arg[1];
          return set_equals(pe, possible_employees);
        }))) {
          null;
        } else {
          set = [possible_employees.shuffle(), []];
          carry.push(set);
        }
        _ = set[0], shifts = set[1];
        shifts.push(day);
        return carry;
      };
      unwrapAssignments = function(carry, value) {
        carry.push(value[0][1]);
        return carry;
      };
      groupShifts = function(carry, value) {
        var v;
        v = carry.find(function(arg) {
          var _, employee;
          employee = arg[0], _ = arg[1];
          return employee === value[0];
        });
        v[1].push(value[1]);
        return carry;
      };
      assign = (function(_this) {
        return function(assignments) {
          var day, days, employee, i, possible_employees, shifts, week;
          week = assignments[0][0][0];
          shifts = assignments.reduce(unwrapAssignments, []).reduce(groupPossibleEmployees, []);
          i = 0;
          shifts = ((function() {
            var j, len, ref, results;
            results = [];
            for (j = 0, len = shifts.length; j < len; j++) {
              ref = shifts[j], possible_employees = ref[0], days = ref[1];
              results.push((function() {
                var l, len1, results1;
                results1 = [];
                for (l = 0, len1 = days.length; l < len1; l++) {
                  day = days[l];
                  results1.push((function() {
                    var len2, n, ref1, results2;
                    ref1 = [possible_employees[(i++) % possible_employees.length]];
                    results2 = [];
                    for (n = 0, len2 = ref1.length; n < len2; n++) {
                      employee = ref1[n];
                      results2.push([employee, day]);
                    }
                    return results2;
                  })());
                }
                return results1;
              })());
            }
            return results;
          })()).map(function(wrap) {
            return wrap.map(function(arr) {
              return arr[0];
            });
          }).reduce((function(c, v) {
            return c.concat(v);
          }), []).reduce(groupShifts, (function() {
            var j, len, ref, results;
            ref = this.employees;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              employee = ref[j];
              results.push([employee, []]);
            }
            return results;
          }).call(_this));
          return [week, shifts];
        };
      })(this);
      possible_assignments = (function() {
        var j, len, ref, results;
        ref = this.weeks;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          week = ref[j];
          results.push((function() {
            var l, len1, n, ref1, ref2, results1, results2;
            ref2 = (function() {
              results2 = [];
              for (var n = 1, ref1 = this.per_shift; 1 <= ref1 ? n <= ref1 : n >= ref1; 1 <= ref1 ? n++ : n--){ results2.push(n); }
              return results2;
            }).apply(this).reduce((function(c, v) {
              return c.concat(week.days);
            }), []);
            results1 = [];
            for (l = 0, len1 = ref2.length; l < len1; l++) {
              day = ref2[l];
              results1.push((function() {
                var len2, o, ref3, results3;
                ref3 = [applyTimeoffRequests(this.employees, week, day)];
                results3 = [];
                for (o = 0, len2 = ref3.length; o < len2; o++) {
                  possible_employees = ref3[o];
                  results3.push([week, [possible_employees, day]]);
                }
                return results3;
              }).call(this));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
      return this.data = possible_assignments.map(assign);
    };

    function Solution(weeks1, employees1, per_shift1) {
      this.weeks = weeks1;
      this.employees = employees1;
      this.per_shift = per_shift1;
      this.solve = bind(this.solve, this);
      this.submit = bind(this.submit, this);
      this.solve();
    }

    return Solution;

  })();

  App = (function() {
    App.prototype.rule_defs = asyncComputed((new RuleDefinitionList()).fetch);

    App.prototype.shift_rules = asyncComputed((new ShiftRuleList()).fetch);

    App.prototype.timeoff_reqs = asyncComputed((new TimeoffReqList()).fetch);

    App.prototype.employees = asyncComputed(function() {
      return view_model((new EmployeeList()).fetch(), Employee);
    });

    App.prototype.active_employee = ko.observable(null);

    function App(from, to) {
      if (from == null) {
        from = 23;
      }
      if (to == null) {
        to = 26;
      }
      this.from_week = ko.observable(from);
      this.to_week = ko.observable(to);
      this.weeks = ko.pureComputed((function(_this) {
        return function() {
          var j, ref, ref1, results, week;
          results = [];
          for (week = j = ref = _this.from_week() - 1, ref1 = _this.to_week() - 1; ref <= ref1 ? j <= ref1 : j >= ref1; week = ref <= ref1 ? ++j : --j) {
            results.push(new Week(moment().startOf('year').startOf('isoweek').add('weeks', week)));
          }
          return results;
        };
      })(this));
      this.solution = ko.computed((function(_this) {
        return function() {
          return Solution.create(_this.weeks(), _this.employees());
        };
      })(this));
    }

    return App;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    window.app = new App();
    return ko.applyBindings(app);
  });

}).call(this);

//# sourceMappingURL=app.js.map
